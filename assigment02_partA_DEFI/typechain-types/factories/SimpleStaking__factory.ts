/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SimpleStaking, SimpleStakingInterface } from "../SimpleStaking";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    inputs: [],
    name: "INTEREST_RATE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "INTEREST_RATE_DENOMINATOR",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SECONDS_PER_YEAR",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "asset",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "calculateInterest",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "depositTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "depositedTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stakingToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516108d93803806108d983398101604081905261002f9161005e565b600280546001600160a01b039092166001600160a01b031992831681179091556003805490921617905561008e565b60006020828403121561007057600080fd5b81516001600160a01b038116811461008757600080fd5b9392505050565b61083c8061009d6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063b6b55f2511610071578063b6b55f251461013c578063c326bf4f1461014f578063cc3266e81461016f578063e11932cf14610177578063e6a69ab81461018a578063f8b2cb4f1461019557600080fd5b80632e1a7d4d146100ae57806338d52e0f146100c357806346b00d04146100f35780635b72a33a1461012157806372f702f314610129575b600080fd5b6100c16100bc36600461070d565b6101a8565b005b6002546100d6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610113610101366004610726565b60016020526000908152604090205481565b6040519081526020016100ea565b610113600581565b6003546100d6906001600160a01b031681565b6100c161014a36600461070d565b610412565b61011361015d366004610726565b60006020819052908152604090205481565b610113606481565b610113610185366004610726565b610639565b6101136301e1338081565b6101136101a3366004610726565b6106d9565b6000811161020c5760405162461bcd60e51b815260206004820152602660248201527f576974686472617720616d6f756e74206d75737420626520677265617465722060448201526507468616e20360d41b60648201526084015b60405180910390fd5b33600090815260016020526040812054900361025e5760405162461bcd60e51b8152602060048201526011602482015270139bc81858dd1a5d994819195c1bdcda5d607a1b6044820152606401610203565b600061026933610639565b6003546040516340c10f1960e01b8152336004820152602481018390529192506001600160a01b0316906340c10f1990604401600060405180830381600087803b1580156102b657600080fd5b505af11580156102ca573d6000803e3d6000fd5b505033600090815260208190526040902054841115915061032690505760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610203565b60025460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610377573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039b9190610756565b50336000908152602081905260409020546103b790839061078e565b33600081815260208181526040808320949094556001905282902042905590517f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364906104069085815260200190565b60405180910390a25050565b600081116104705760405162461bcd60e51b815260206004820152602560248201527f4465706f73697420616d6f756e74206d75737420626520677265617465722074604482015264068616e20360dc1b6064820152608401610203565b6002546040516370a0823160e01b815233600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa1580156104b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104dc91906107a1565b10156105215760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606401610203565b6002546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610578573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059c9190610756565b5060006105a833610639565b336000908152602081905260408120805492935083929091906105cc9084906107ba565b909155505033600090815260208190526040812080548492906105f09084906107ba565b90915550503360008181526001602052604090819020429055517fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c906104069085815260200190565b6001600160a01b038116600090815260016020526040812054810361066057506000919050565b6001600160a01b038216600090815260016020526040812054610683904261078e565b905060006106966301e1338060646107cd565b6001600160a01b03851660009081526020819052604090205483906106bd906005906107cd565b6106c791906107cd565b6106d191906107e4565b949350505050565b60006106e482610639565b6001600160a01b03831660009081526020819052604090205461070791906107ba565b92915050565b60006020828403121561071f57600080fd5b5035919050565b60006020828403121561073857600080fd5b81356001600160a01b038116811461074f57600080fd5b9392505050565b60006020828403121561076857600080fd5b8151801515811461074f57600080fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561070757610707610778565b6000602082840312156107b357600080fd5b5051919050565b8082018082111561070757610707610778565b808202811582820484141761070757610707610778565b60008261080157634e487b7160e01b600052601260045260246000fd5b50049056fea26469706673582212205b40afb5b6d7f8d899cd39f98aab2dc28a9c97f57097f300cc22f476b71376bd64736f6c63430008140033";

type SimpleStakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SimpleStakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SimpleStaking__factory extends ContractFactory {
  constructor(...args: SimpleStakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "SimpleStaking";
  }

  deploy(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SimpleStaking> {
    return super.deploy(token, overrides || {}) as Promise<SimpleStaking>;
  }
  getDeployTransaction(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(token, overrides || {});
  }
  attach(address: string): SimpleStaking {
    return super.attach(address) as SimpleStaking;
  }
  connect(signer: Signer): SimpleStaking__factory {
    return super.connect(signer) as SimpleStaking__factory;
  }
  static readonly contractName: "SimpleStaking";
  public readonly contractName: "SimpleStaking";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SimpleStakingInterface {
    return new utils.Interface(_abi) as SimpleStakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SimpleStaking {
    return new Contract(address, _abi, signerOrProvider) as SimpleStaking;
  }
}
