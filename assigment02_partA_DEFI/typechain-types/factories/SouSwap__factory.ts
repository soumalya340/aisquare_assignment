/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SouSwap, SouSwapInterface } from "../SouSwap";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token_addr",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ethToToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "input_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "input_reserve",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "output_reserve",
        type: "uint256",
      },
    ],
    name: "getInputPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokens",
        type: "uint256",
      },
    ],
    name: "init",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "liquidityByUser",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "provideLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_tokens",
        type: "uint256",
      },
    ],
    name: "tokenToEth",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdrawLiquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610cfd380380610cfd83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610c6a806100936000396000f3fe6080604052600436106100865760003560e01c8063789770f411610059578063789770f41461011157806389f2a87114610119578063b7b0422d14610139578063d35d04a61461014c578063fc0c546a1461017957600080fd5b80630a861f2a1461008b57806315770f92146100c557806360c97b22146100e957806370b2a30f146100f1575b600080fd5b34801561009757600080fd5b506100ab6100a6366004610ab4565b6101b1565b604080519283526020830191909152015b60405180910390f35b3480156100d157600080fd5b506100db60015481565b6040519081526020016100bc565b6100db610407565b3480156100fd57600080fd5b506100db61010c366004610ab4565b610679565b6100db6107fd565b34801561012557600080fd5b506100db610134366004610acd565b610920565b6100db610147366004610ab4565b6109bb565b34801561015857600080fd5b506100db610167366004610af9565b60026020526000908152604090205481565b34801561018557600080fd5b50600054610199906001600160a01b031681565b6040516001600160a01b0390911681526020016100bc565b3360009081526002602052604081205481908311156102175760405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e74206c69717569646974794279557365720000000060448201526064015b60405180910390fd5b600080546040516370a0823160e01b81523060048201524792916001600160a01b0316906370a0823190602401602060405180830381865afa158015610261573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102859190610b22565b9050600060015483876102989190610b51565b6102a29190610b6e565b9050600060015483886102b59190610b51565b6102bf9190610b6e565b336000908152600260205260408120805492935089929091906102e3908490610b90565b9250508190555086600160008282546102fc9190610b90565b9091555050604051600090339084908381818185875af1925050503d8060008114610343576040519150601f19603f3d011682016040523d82523d6000602084013e610348565b606091505b50509050806103695760405162461bcd60e51b815260040161020e90610ba3565b60005460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044016020604051808303816000875af11580156103ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103de9190610bd0565b6103fa5760405162461bcd60e51b815260040161020e90610bf2565b5090969095509350505050565b6000806104143447610b90565b600080546040516370a0823160e01b815230600482015292935090916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610462573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104869190610b22565b90506000826104958334610b51565b61049f9190610b6e565b9050600083600154346104b29190610b51565b6104bc9190610b6e565b6000546040516370a0823160e01b815233600482015291925083916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610509573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052d9190610b22565b101561059d57604051600090339034908381818185875af1925050503d8060008114610575576040519150601f19603f3d011682016040523d82523d6000602084013e61057a565b606091505b505090508061059b5760405162461bcd60e51b815260040161020e90610ba3565b505b33600090815260026020526040812080548392906105bc908490610c21565b9250508190555080600160008282546105d59190610c21565b90915550506000546040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610631573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106559190610bd0565b6106715760405162461bcd60e51b815260040161020e90610bf2565b949350505050565b600080546040516370a0823160e01b815230600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa1580156106c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e69190610b22565b905060006106f5848347610920565b6000546040516323b872dd60e01b8152336004820152306024820152604481018790529192506001600160a01b0316906323b872dd906064016020604051808303816000875af115801561074d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107719190610bd0565b61078d5760405162461bcd60e51b815260040161020e90610bf2565b604051600090339083908381818185875af1925050503d80600081146107cf576040519150601f19603f3d011682016040523d82523d6000602084013e6107d4565b606091505b50509050806107f55760405162461bcd60e51b815260040161020e90610ba3565b509392505050565b600080546040516370a0823160e01b815230600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa158015610846573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086a9190610b22565b905060006108783447610b90565b90506000610887348385610920565b60005460405163a9059cbb60e01b8152336004820152602481018390529192506001600160a01b03169063a9059cbb906044016020604051808303816000875af11580156108d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fd9190610bd0565b6109195760405162461bcd60e51b815260040161020e90610bf2565b9392505050565b600080831180156109315750600082115b61096d5760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f56414c554560981b604482015260640161020e565b600061097b856103e5610b51565b905060006109898483610b51565b905060008261099a876103e8610b51565b6109a49190610c21565b90506109b08183610b6e565b979650505050505050565b6000600154600014610a0f5760405162461bcd60e51b815260206004820152601960248201527f44455820616c726561647920686173206c697175696469747900000000000000604482015260640161020e565b47600181905533600081815260026020526040808220939093555491516323b872dd60e01b81526004810191909152306024820152604481018490526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa39190610bd0565b610aac57600080fd5b505060015490565b600060208284031215610ac657600080fd5b5035919050565b600080600060608486031215610ae257600080fd5b505081359360208301359350604090920135919050565b600060208284031215610b0b57600080fd5b81356001600160a01b038116811461091957600080fd5b600060208284031215610b3457600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610b6857610b68610b3b565b92915050565b600082610b8b57634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115610b6857610b68610b3b565b602080825260139082015272115512081d1c985b9cd9995c8819985a5b1959606a1b604082015260600190565b600060208284031215610be257600080fd5b8151801515811461091957600080fd5b602080825260159082015274151bdad95b881d1c985b9cd9995c8819985a5b1959605a1b604082015260600190565b80820180821115610b6857610b68610b3b56fea2646970667358221220e4b387162c373f49bb3280ac5bf6983f1e91df0fe41529b9e4c79489e8d92bde64736f6c63430008140033";

type SouSwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SouSwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SouSwap__factory extends ContractFactory {
  constructor(...args: SouSwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "SouSwap";
  }

  deploy(
    token_addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SouSwap> {
    return super.deploy(token_addr, overrides || {}) as Promise<SouSwap>;
  }
  getDeployTransaction(
    token_addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(token_addr, overrides || {});
  }
  attach(address: string): SouSwap {
    return super.attach(address) as SouSwap;
  }
  connect(signer: Signer): SouSwap__factory {
    return super.connect(signer) as SouSwap__factory;
  }
  static readonly contractName: "SouSwap";
  public readonly contractName: "SouSwap";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SouSwapInterface {
    return new utils.Interface(_abi) as SouSwapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SouSwap {
    return new Contract(address, _abi, signerOrProvider) as SouSwap;
  }
}
