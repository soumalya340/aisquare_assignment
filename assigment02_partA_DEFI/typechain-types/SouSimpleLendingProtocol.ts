/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SouSimpleLendingProtocolInterface extends utils.Interface {
  contractName: "SouSimpleLendingProtocol";
  functions: {
    "COLLATERAL_RATIO()": FunctionFragment;
    "INTEREST_DENOMINATOR()": FunctionFragment;
    "INTEREST_RATE()": FunctionFragment;
    "SECONDS_PER_YEAR()": FunctionFragment;
    "SIMPLECOIN_USDC_PRICE()": FunctionFragment;
    "accounts(address)": FunctionFragment;
    "borrowUSDC(uint256)": FunctionFragment;
    "depositSimpleCoinAsCollateral(uint256)": FunctionFragment;
    "depositUSDC(uint256)": FunctionFragment;
    "getCollateralValueInUSDC(uint256)": FunctionFragment;
    "liquidate(address)": FunctionFragment;
    "repayUSDC(uint256)": FunctionFragment;
    "simpleCoin()": FunctionFragment;
    "souSwap()": FunctionFragment;
    "usdc()": FunctionFragment;
    "withdrawSimpleCoin(uint256)": FunctionFragment;
    "withdrawUSDC(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "COLLATERAL_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INTEREST_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INTEREST_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECONDS_PER_YEAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SIMPLECOIN_USDC_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "accounts", values: [string]): string;
  encodeFunctionData(
    functionFragment: "borrowUSDC",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositSimpleCoinAsCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositUSDC",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralValueInUSDC",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "liquidate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "repayUSDC",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "simpleCoin",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "souSwap", values?: undefined): string;
  encodeFunctionData(functionFragment: "usdc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawSimpleCoin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUSDC",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "COLLATERAL_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INTEREST_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INTEREST_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECONDS_PER_YEAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SIMPLECOIN_USDC_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accounts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrowUSDC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositSimpleCoinAsCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositUSDC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralValueInUSDC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repayUSDC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "simpleCoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "souSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSimpleCoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUSDC",
    data: BytesLike
  ): Result;

  events: {
    "BorrowUSDC(address,uint256)": EventFragment;
    "DepositSimpleCoin(address,uint256)": EventFragment;
    "DepositUSDC(address,uint256)": EventFragment;
    "Liquidate(address,uint256,uint256)": EventFragment;
    "RepayUSDC(address,uint256)": EventFragment;
    "WithdrawSimpleCoin(address,uint256)": EventFragment;
    "WithdrawUSDC(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BorrowUSDC"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositSimpleCoin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositUSDC"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RepayUSDC"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawSimpleCoin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawUSDC"): EventFragment;
}

export type BorrowUSDCEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type BorrowUSDCEventFilter = TypedEventFilter<BorrowUSDCEvent>;

export type DepositSimpleCoinEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type DepositSimpleCoinEventFilter =
  TypedEventFilter<DepositSimpleCoinEvent>;

export type DepositUSDCEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type DepositUSDCEventFilter = TypedEventFilter<DepositUSDCEvent>;

export type LiquidateEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; collateral: BigNumber; debt: BigNumber }
>;

export type LiquidateEventFilter = TypedEventFilter<LiquidateEvent>;

export type RepayUSDCEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type RepayUSDCEventFilter = TypedEventFilter<RepayUSDCEvent>;

export type WithdrawSimpleCoinEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type WithdrawSimpleCoinEventFilter =
  TypedEventFilter<WithdrawSimpleCoinEvent>;

export type WithdrawUSDCEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type WithdrawUSDCEventFilter = TypedEventFilter<WithdrawUSDCEvent>;

export interface SouSimpleLendingProtocol extends BaseContract {
  contractName: "SouSimpleLendingProtocol";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SouSimpleLendingProtocolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    COLLATERAL_RATIO(overrides?: CallOverrides): Promise<[BigNumber]>;

    INTEREST_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    INTEREST_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    SECONDS_PER_YEAR(overrides?: CallOverrides): Promise<[BigNumber]>;

    SIMPLECOIN_USDC_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    accounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        depositedUSDC: BigNumber;
        borrowedUSDC: BigNumber;
        depositedSimpleCoin: BigNumber;
        depositTimestamp: BigNumber;
        borrowTimestamp: BigNumber;
      }
    >;

    borrowUSDC(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositSimpleCoinAsCollateral(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositUSDC(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCollateralValueInUSDC(
      simpleCoinAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidate(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayUSDC(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    simpleCoin(overrides?: CallOverrides): Promise<[string]>;

    souSwap(overrides?: CallOverrides): Promise<[string]>;

    usdc(overrides?: CallOverrides): Promise<[string]>;

    withdrawSimpleCoin(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawUSDC(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  COLLATERAL_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

  INTEREST_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  INTEREST_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  SECONDS_PER_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

  SIMPLECOIN_USDC_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  accounts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      depositedUSDC: BigNumber;
      borrowedUSDC: BigNumber;
      depositedSimpleCoin: BigNumber;
      depositTimestamp: BigNumber;
      borrowTimestamp: BigNumber;
    }
  >;

  borrowUSDC(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositSimpleCoinAsCollateral(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositUSDC(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCollateralValueInUSDC(
    simpleCoinAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquidate(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayUSDC(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  simpleCoin(overrides?: CallOverrides): Promise<string>;

  souSwap(overrides?: CallOverrides): Promise<string>;

  usdc(overrides?: CallOverrides): Promise<string>;

  withdrawSimpleCoin(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawUSDC(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    COLLATERAL_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    INTEREST_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    INTEREST_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    SECONDS_PER_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

    SIMPLECOIN_USDC_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    accounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        depositedUSDC: BigNumber;
        borrowedUSDC: BigNumber;
        depositedSimpleCoin: BigNumber;
        depositTimestamp: BigNumber;
        borrowTimestamp: BigNumber;
      }
    >;

    borrowUSDC(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    depositSimpleCoinAsCollateral(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositUSDC(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getCollateralValueInUSDC(
      simpleCoinAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(user: string, overrides?: CallOverrides): Promise<void>;

    repayUSDC(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    simpleCoin(overrides?: CallOverrides): Promise<string>;

    souSwap(overrides?: CallOverrides): Promise<string>;

    usdc(overrides?: CallOverrides): Promise<string>;

    withdrawSimpleCoin(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawUSDC(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BorrowUSDC(address,uint256)"(
      user?: string | null,
      amount?: null
    ): BorrowUSDCEventFilter;
    BorrowUSDC(user?: string | null, amount?: null): BorrowUSDCEventFilter;

    "DepositSimpleCoin(address,uint256)"(
      user?: string | null,
      amount?: null
    ): DepositSimpleCoinEventFilter;
    DepositSimpleCoin(
      user?: string | null,
      amount?: null
    ): DepositSimpleCoinEventFilter;

    "DepositUSDC(address,uint256)"(
      user?: string | null,
      amount?: null
    ): DepositUSDCEventFilter;
    DepositUSDC(user?: string | null, amount?: null): DepositUSDCEventFilter;

    "Liquidate(address,uint256,uint256)"(
      user?: string | null,
      collateral?: null,
      debt?: null
    ): LiquidateEventFilter;
    Liquidate(
      user?: string | null,
      collateral?: null,
      debt?: null
    ): LiquidateEventFilter;

    "RepayUSDC(address,uint256)"(
      user?: string | null,
      amount?: null
    ): RepayUSDCEventFilter;
    RepayUSDC(user?: string | null, amount?: null): RepayUSDCEventFilter;

    "WithdrawSimpleCoin(address,uint256)"(
      user?: string | null,
      amount?: null
    ): WithdrawSimpleCoinEventFilter;
    WithdrawSimpleCoin(
      user?: string | null,
      amount?: null
    ): WithdrawSimpleCoinEventFilter;

    "WithdrawUSDC(address,uint256)"(
      user?: string | null,
      amount?: null
    ): WithdrawUSDCEventFilter;
    WithdrawUSDC(user?: string | null, amount?: null): WithdrawUSDCEventFilter;
  };

  estimateGas: {
    COLLATERAL_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    INTEREST_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    INTEREST_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    SECONDS_PER_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

    SIMPLECOIN_USDC_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    accounts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowUSDC(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositSimpleCoinAsCollateral(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositUSDC(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCollateralValueInUSDC(
      simpleCoinAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayUSDC(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    simpleCoin(overrides?: CallOverrides): Promise<BigNumber>;

    souSwap(overrides?: CallOverrides): Promise<BigNumber>;

    usdc(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawSimpleCoin(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawUSDC(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    COLLATERAL_RATIO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INTEREST_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INTEREST_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SECONDS_PER_YEAR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SIMPLECOIN_USDC_PRICE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowUSDC(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositSimpleCoinAsCollateral(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositUSDC(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCollateralValueInUSDC(
      simpleCoinAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayUSDC(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    simpleCoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    souSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawSimpleCoin(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawUSDC(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
