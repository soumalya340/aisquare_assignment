/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SouSwapInterface extends utils.Interface {
  contractName: "SouSwap";
  functions: {
    "ethToToken()": FunctionFragment;
    "getInputPrice(uint256,uint256,uint256)": FunctionFragment;
    "init(uint256)": FunctionFragment;
    "liquidityByUser(address)": FunctionFragment;
    "provideLiquidity()": FunctionFragment;
    "token()": FunctionFragment;
    "tokenToEth(uint256)": FunctionFragment;
    "totalLiquidity()": FunctionFragment;
    "withdrawLiquidity(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ethToToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInputPrice",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "init", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "liquidityByUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "provideLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenToEth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidity",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ethToToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityByUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "provideLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenToEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidity",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SouSwap extends BaseContract {
  contractName: "SouSwap";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SouSwapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ethToToken(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getInputPrice(
      input_amount: BigNumberish,
      input_reserve: BigNumberish,
      output_reserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    init(
      _tokens: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidityByUser(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    provideLiquidity(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokenToEth(
      _tokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawLiquidity(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ethToToken(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getInputPrice(
    input_amount: BigNumberish,
    input_reserve: BigNumberish,
    output_reserve: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  init(
    _tokens: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidityByUser(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  provideLiquidity(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  tokenToEth(
    _tokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawLiquidity(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ethToToken(overrides?: CallOverrides): Promise<BigNumber>;

    getInputPrice(
      input_amount: BigNumberish,
      input_reserve: BigNumberish,
      output_reserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(_tokens: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    liquidityByUser(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    provideLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    tokenToEth(
      _tokens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawLiquidity(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;
  };

  filters: {};

  estimateGas: {
    ethToToken(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getInputPrice(
      input_amount: BigNumberish,
      input_reserve: BigNumberish,
      output_reserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _tokens: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidityByUser(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    provideLiquidity(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokenToEth(
      _tokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawLiquidity(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ethToToken(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getInputPrice(
      input_amount: BigNumberish,
      input_reserve: BigNumberish,
      output_reserve: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _tokens: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidityByUser(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    provideLiquidity(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenToEth(
      _tokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalLiquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawLiquidity(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
